{"version":3,"sources":["components/Bar.jsx","brain/BubbleBrain.jsx","brain/HeapBrain.jsx","brain/InsertBrain.jsx","brain/MergeBrain.jsx","brain/QuickBrain.jsx","components/AnimGround.jsx","components/Controls.jsx","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","components/Footer.jsx","components/AlgoButton.jsx","sortingLogo.png","components/Header.jsx","CreatingArr.js","getPseudo.js","App.js","index.js"],"names":["Bar","props","arr","index","heightFactor","size","length","value","flag","Color","className","style","height","at","display","flexDirection","alignContent","width","justifyContent","backgroundColor","marginBottom","BubbleBrain","i","j","translate","sizeFlag","speed","isSorted","sortedIndex","color","duration","translateX","easing","HeapBrain","heapStates","heapify","includes","InsertBrain","insertionStates","f1","f2","f3","insertSI","scaleY","translateY","MergeBrain","mergeStates","low","mid","k","isPositioned","isPositionedTx","colorEleArr","colorArr","temp","indexOf","some","row","QuickBrain","positionedIndexArr","pivot","limits","high","AnimGround","max","strings","states","algoID","inProcess","scaleX","undefined","map","s","psIndex","padding","BSI","selectBrain","align","paddingRight","time","Controls","useState","setSize","setSpeed","onButton","setOnButton","bgPosition","setbgPosition","active","inactive","borderRadius","fontSize","fontWeight","backgroundPosition","onMouseOver","onMouseOut","onMouseMove","e","clientX","clientY","onClick","setIsSorted","update","background","onChange","event","target","type","min","id","updateSpeed","setInProgress","setTime","setPsIndex","bubble","a","st","performance","now","et","flag1","Promise","done","setTimeout","toFixed","BubbleSort","insertion","InsertionSort","mergeSort1","merge1","n1","n2","left","right","push","m","mergeSort","Math","floor","merge","getRandomColor","letters","split","random","splice","MergeSort","partition1","quick","part","QuickSortImpl","partition","QuickSort","heapSort","n","largest","r","l","maxHeapify","array","HeapSort","Footer","setInProcess","toast","position","POSITION","BOTTOM_RIGHT","autoClose","configure","textAlign","alignItems","AlgoButton","clicked","setClicked","setAlgoImpl","marginLeft","name","sa","Header","selectedAlgo","setAlgo","src","logo","alt","paddingLeft","createArray","getPseudo","arr0","App","setArr","setStrings","setStates","bubbleSortedIndex","setBSI","insertStates","setInsertStates","setMergeStates","setPositionedIndexArr","pivotElement","setPivot","partitionLimits","setLimits","setHeapStates","setIsSortedImpl","setInProcessImpl","modifyArrBubble","w","x","y","flagg","modifyArrInsert","modifyArrQuick","modifyArrMerge","isPostiioned","modifyArrHeap","inSorted","selectAnimGround","updateAlgoSelection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1915523d.chunk.js","sourcesContent":["\r\nfunction Bar(props){\r\n\r\n    let arr = props.arr;\r\n    let index = props.index;\r\n    let heightFactor = props.heightFactor;\r\n    let size = arr.length;\r\n    let value = props.value;\r\n    let flag = props.flag;\r\n    let Color = props.Color; \r\n\r\n    // console.log(props);\r\n\r\n    return(\r\n        <div\r\n            key={index}\r\n            className={\"align-items-center\"}\r\n            style={\r\n                {\r\n                    height: arr.at(index) * heightFactor + 100,\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignContent: \"center\",\r\n                }\r\n            }>\r\n\r\n            <div style={{\r\n                height: arr.at(index) * heightFactor + 50,\r\n                width: 1000 / size,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n            }}>\r\n                <div style={{\r\n                    height: arr.at(index) * heightFactor + 50,\r\n                    width: 6000 / (size * 7),\r\n                    backgroundColor: Color\r\n                }}>\r\n                    {!flag && <div>\r\n                        <p style={{marginBottom: \"0\"}}>{value}</p>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Bar;","import Anime from 'react-anime';\r\nimport Bar from '../components/Bar';\r\nfunction BubbleBrain(index, value, i, j, flag, arr, heightFactor, size, translate, sizeFlag, speed, isSorted, sortedIndex) {\r\n    let color;\r\n\r\n    if (isSorted) {\r\n        color = \"lightBlue\";\r\n    } else if (sortedIndex > 1 && index > size - sortedIndex) {\r\n        color = \"#f9fb5a\";\r\n    } else {\r\n        if (index === i || index === j) {\r\n            color = \"#ff5e5e\"\r\n        } else {\r\n            color = \"lightgreen\";\r\n        }\r\n    }\r\n\r\n\r\n    if (index === i && flag) {\r\n        return (\r\n            <Anime duration={speed - 10} translateX={translate * (j - i)} easing={\"easeInOutQuad\"}>\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            </Anime>\r\n        )\r\n    } else if (index === j && flag) {\r\n        return (\r\n            <Anime duration={speed - 10} translateX={-translate * (j - i)} easing={\"easeInOutQuad\"}>\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            </Anime>\r\n        )\r\n    } else {\r\n        return (\r\n            <Bar\r\n                key={index}\r\n                Color={color}\r\n                arr={arr}\r\n                index={index}\r\n                heightFactor={heightFactor}\r\n                size={size}\r\n                value={value}\r\n                flag={sizeFlag}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default BubbleBrain;","import Anime from \"react-anime\";\r\nimport Bar from \"../components/Bar\";\r\nfunction HeapBrain(\r\n    index,\r\n    value,\r\n    heapStates,\r\n    arr,\r\n    heightFactor,\r\n    size,\r\n    translate,\r\n    sizeFlag,\r\n    speed,\r\n    isSorted\r\n) {\r\n    let color;\r\n    let { i, j, sortedIndex, flag, heapify } = heapStates;\r\n    if (isSorted) {\r\n        color = \"lightBlue\";\r\n    } else {\r\n        if (sortedIndex.includes(index)) {\r\n            color = \"#f9fb5a\";\r\n        } else {\r\n            if (index === i || index === j) {\r\n                if (heapify) {\r\n                    color = \"#dda0dd\";\r\n                } else {\r\n                    color = \"#ff5e5e\";\r\n                }\r\n            } else {\r\n                color = \"lightgreen\";\r\n            }\r\n        }\r\n    }\r\n\r\n    if (index === i && flag) {\r\n        return (\r\n            <Anime\r\n                duration={speed - 10}\r\n                translateX={translate * (j - i)}\r\n                easing={\"easeInOutQuad\"}\r\n            >\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            </Anime>\r\n        );\r\n    } else if (index === j && flag) {\r\n        return (\r\n            <Anime\r\n                duration={speed - 10}\r\n                translateX={-translate * (j - i)}\r\n                easing={\"easeInOutQuad\"}\r\n            >\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            </Anime>\r\n        );\r\n    } else {\r\n        return (\r\n            <Bar\r\n                key={index}\r\n                Color={color}\r\n                arr={arr}\r\n                index={index}\r\n                heightFactor={heightFactor}\r\n                size={size}\r\n                value={value}\r\n                flag={sizeFlag}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeapBrain;\r\n","import Anime from \"react-anime\";\r\nimport Bar from \"../components/Bar\";\r\n\r\nfunction InsertBrain(\r\n    index,\r\n    value,\r\n    i,\r\n    j,\r\n    flag,\r\n    insertionStates,\r\n    arr,\r\n    heightFactor,\r\n    size,\r\n    translate,\r\n    sizeFlag,\r\n    speed,\r\n    isSorted\r\n) {\r\n    let { f1, f2, f3, insertSI } = insertionStates;\r\n    let color = isSorted\r\n        ? \"lightBlue\"\r\n        : index === i || index === j\r\n        ? \"#ff5e5e\"\r\n        : index < insertSI\r\n        ? \"#f9fb5a\"\r\n        : \"lightGreen\";\r\n\r\n    if (f1 === 1 && f2 === 0 && f3 === 1) {\r\n        if (index === j) {\r\n            return (\r\n                <Anime\r\n                    duration={speed - 10}\r\n                    scaleY={0.5}\r\n                    translateY={425}\r\n                    easing={\"easeInOutQuad\"}\r\n                >\r\n                    <Bar\r\n                        key={index}\r\n                        Color={color}\r\n                        arr={arr}\r\n                        index={index}\r\n                        heightFactor={heightFactor}\r\n                        size={size}\r\n                        value={value}\r\n                        flag={sizeFlag}\r\n                    />\r\n                </Anime>\r\n            );\r\n        } else {\r\n            return (\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            );\r\n        }\r\n    } else if (f1 === 0) {\r\n        if (index === i && flag) {\r\n            return (\r\n                <Anime\r\n                    duration={speed - 10}\r\n                    translateX={translate * (j - i)}\r\n                    easing={\"easeInOutQuad\"}\r\n                >\r\n                    <Bar\r\n                        key={index}\r\n                        Color={color}\r\n                        arr={arr}\r\n                        index={index}\r\n                        heightFactor={heightFactor}\r\n                        size={size}\r\n                        value={value}\r\n                        flag={sizeFlag}\r\n                    />\r\n                </Anime>\r\n            );\r\n        } else if (index === j && flag) {\r\n            return (\r\n                <Anime\r\n                    duration={0}\r\n                    scaleY={0.5}\r\n                    translateY={425}\r\n                    easing={\"easeInOutQuad\"}\r\n                >\r\n                    <Anime\r\n                        duration={speed - 10}\r\n                        translateX={-translate * (j - i)}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Bar\r\n                            key={index}\r\n                            Color={color}\r\n                            arr={arr}\r\n                            index={index}\r\n                            heightFactor={heightFactor}\r\n                            size={size}\r\n                            value={value}\r\n                            flag={sizeFlag}\r\n                        />\r\n                    </Anime>\r\n                </Anime>\r\n            );\r\n        } else {\r\n            return (\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            );\r\n        }\r\n    } else if (f1 === 1 && f2 === 1 && f3 === 1) {\r\n        let factor = 0.3 - ((100 - value) * 0.2) / 100;\r\n\r\n        if (index === j) {\r\n            return (\r\n                <Anime\r\n                    duration={0}\r\n                    scaleY={0.5}\r\n                    translateY={425}\r\n                    easing={\"easeInOutQuad\"}\r\n                >\r\n                    <Anime\r\n                        duration={speed - 10}\r\n                        scaleY={2}\r\n                        // translateY={-(360 - 425 * factor)}\r\n                        translateY={-320 + value * 0.75}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Bar\r\n                            key={index}\r\n                            Color={color}\r\n                            arr={arr}\r\n                            index={index}\r\n                            heightFactor={heightFactor}\r\n                            size={size}\r\n                            value={value}\r\n                            flag={sizeFlag}\r\n                        />\r\n                    </Anime>\r\n                </Anime>\r\n            );\r\n        } else {\r\n            return (\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            );\r\n        }\r\n    } else {\r\n        return (\r\n            <Bar\r\n                key={index}\r\n                Color={color}\r\n                arr={arr}\r\n                index={index}\r\n                heightFactor={heightFactor}\r\n                size={size}\r\n                value={value}\r\n                flag={sizeFlag}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default InsertBrain;\r\n","import Anime from \"react-anime\";\r\nimport Bar from \"../components/Bar\";\r\n\r\nfunction MergeBrain(\r\n    index,\r\n    value,\r\n    mergeStates,\r\n    arr,\r\n    heightFactor,\r\n    size,\r\n    translate,\r\n    sizeFlag,\r\n    speed,\r\n    isSorted\r\n) {\r\n    let {\r\n        low,\r\n        mid,\r\n        k,\r\n        i,\r\n        j,\r\n        f1,\r\n        f2,\r\n        isPositioned,\r\n        isPositionedTx,\r\n        colorEleArr,\r\n        colorArr,\r\n    } = mergeStates;\r\n\r\n    let color = isSorted ? \"lightBlue\" : \"lightGreen\";\r\n\r\n    if (f2 === 1) {\r\n        if (isPositioned.includes(index)) {\r\n            let temp = isPositionedTx[isPositioned.indexOf(index)];\r\n\r\n            color = \"#f9fb5a\";\r\n            let factor = 0.3 - ((100 - value) * 0.2) / 100;\r\n\r\n            return (\r\n                <Anime\r\n                    duration={0}\r\n                    scaleY={0.5}\r\n                    translateY={425}\r\n                    easing={\"easeInOutQuad\"}\r\n                >\r\n                    <Anime\r\n                        duration={0}\r\n                        translateX={translate * temp}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Anime\r\n                            duration={speed - 10}\r\n                            translateY={-440 - 1.8 * (100 - value)}\r\n                            scaleY={2}\r\n                            easing={\"easeInOutQuad\"}\r\n                        >\r\n                            <Bar\r\n                                key={index}\r\n                                Color={color}\r\n                                arr={arr}\r\n                                index={index}\r\n                                heightFactor={heightFactor}\r\n                                size={size}\r\n                                value={value}\r\n                                flag={sizeFlag}\r\n                            />\r\n                        </Anime>\r\n                    </Anime>\r\n                </Anime>\r\n            );\r\n        } else {\r\n            color = \"lightGreen\";\r\n            if (colorEleArr.some((row) => row.includes(index))) {\r\n                // color = \"purple\";\r\n                for (let i = 0; i < colorEleArr.length; i++) {\r\n                    if (colorEleArr[i].includes(index)) {\r\n                        color = colorArr[i];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return (\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            );\r\n        }\r\n    } else {\r\n        if (f1 === 0) {\r\n            if (index === low + i) {\r\n                color = \"#ff5e5e\";\r\n                return (\r\n                    <Anime\r\n                        duration={speed - 10}\r\n                        scaleY={0.5}\r\n                        translateY={425}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Anime\r\n                            duration={speed - 10}\r\n                            translateX={translate * (k - i)}\r\n                            easing={\"easeInOutQuad\"}\r\n                        >\r\n                            <Bar\r\n                                key={index}\r\n                                Color={color}\r\n                                arr={arr}\r\n                                index={index}\r\n                                heightFactor={heightFactor}\r\n                                size={size}\r\n                                value={value}\r\n                                flag={sizeFlag}\r\n                            />\r\n                        </Anime>\r\n                    </Anime>\r\n                );\r\n            } else if (isPositioned.includes(index)) {\r\n                let temp = isPositionedTx[isPositioned.indexOf(index)];\r\n                color = \"#f9fb5a\";\r\n                return (\r\n                    <Anime\r\n                        duration={0}\r\n                        scaleY={0.5}\r\n                        translateY={425}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Anime\r\n                            duration={0}\r\n                            translateX={translate * temp}\r\n                            easing={\"easeInOutQuad\"}\r\n                        >\r\n                            <Bar\r\n                                key={index}\r\n                                Color={color}\r\n                                arr={arr}\r\n                                index={index}\r\n                                heightFactor={heightFactor}\r\n                                size={size}\r\n                                value={value}\r\n                                flag={sizeFlag}\r\n                            />\r\n                        </Anime>\r\n                    </Anime>\r\n                );\r\n            } else {\r\n                if (colorEleArr.some((row) => row.includes(index))) {\r\n                    // color = \"purple\";\r\n                    for (let i = 0; i < colorEleArr.length; i++) {\r\n                        if (colorEleArr[i].includes(index)) {\r\n                            color = colorArr[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <Bar\r\n                        key={index}\r\n                        Color={color}\r\n                        arr={arr}\r\n                        index={index}\r\n                        heightFactor={heightFactor}\r\n                        size={size}\r\n                        value={value}\r\n                        flag={sizeFlag}\r\n                    />\r\n                );\r\n            }\r\n        } else if (f1 === 1) {\r\n            if (index === mid + j + 1) {\r\n                color = \"#ff5e5e\";\r\n                return (\r\n                    <Anime\r\n                        duration={speed - 10}\r\n                        scaleY={0.5}\r\n                        translateY={425}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Anime\r\n                            duration={speed - 10}\r\n                            translateX={translate * (low + k - (mid + j + 1))}\r\n                            easing={\"easeInOutQuad\"}\r\n                        >\r\n                            <Bar\r\n                                key={index}\r\n                                Color={color}\r\n                                arr={arr}\r\n                                index={index}\r\n                                heightFactor={heightFactor}\r\n                                size={size}\r\n                                value={value}\r\n                                flag={sizeFlag}\r\n                            />\r\n                        </Anime>\r\n                    </Anime>\r\n                );\r\n            } else if (isPositioned.includes(index)) {\r\n                let temp = isPositionedTx[isPositioned.indexOf(index)];\r\n                color = \"#f9fb5a\";\r\n                return (\r\n                    <Anime\r\n                        duration={0}\r\n                        scaleY={0.5}\r\n                        translateY={425}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <Anime\r\n                            duration={0}\r\n                            translateX={translate * temp}\r\n                            easing={\"easeInOutQuad\"}\r\n                        >\r\n                            <Bar\r\n                                key={index}\r\n                                Color={color}\r\n                                arr={arr}\r\n                                index={index}\r\n                                heightFactor={heightFactor}\r\n                                size={size}\r\n                                value={value}\r\n                                flag={sizeFlag}\r\n                            />\r\n                        </Anime>\r\n                    </Anime>\r\n                );\r\n            } else {\r\n                if (colorEleArr.some((row) => row.includes(index))) {\r\n                    // color = \"purple\";\r\n                    for (let i = 0; i < colorEleArr.length; i++) {\r\n                        if (colorEleArr[i].includes(index)) {\r\n                            color = colorArr[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return (\r\n                    <Bar\r\n                        key={index}\r\n                        Color={color}\r\n                        arr={arr}\r\n                        index={index}\r\n                        heightFactor={heightFactor}\r\n                        size={size}\r\n                        value={value}\r\n                        flag={sizeFlag}\r\n                    />\r\n                );\r\n            }\r\n        } else {\r\n            if (isSorted) {\r\n                color = \"lightBlue\";\r\n            } else if (colorEleArr.some((row) => row.includes(index))) {\r\n                for (let i = 0; i < colorEleArr.length; i++) {\r\n                    if (colorEleArr[i].includes(index)) {\r\n                        color = colorArr[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // console.log(color);\r\n\r\n                // color = \"purple\";\r\n            }\r\n            // color = isSorted && \"lightBlue\";\r\n            return (\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default MergeBrain;\r\n","import Anime from \"react-anime\";\r\nimport Bar from \"../components/Bar\";\r\nfunction QuickBrain(\r\n    index,\r\n    value,\r\n    i,\r\n    j,\r\n    flag,\r\n    arr,\r\n    heightFactor,\r\n    size,\r\n    translate,\r\n    sizeFlag,\r\n    speed,\r\n    isSorted,\r\n    positionedIndexArr,\r\n    pivot,\r\n    limits\r\n) {\r\n    let { low, high } = limits;\r\n    let color;\r\n\r\n    if (isSorted) {\r\n        color = \"lightBlue\";\r\n    } else {\r\n        if (index === pivot) {\r\n            color = \"red\";\r\n        } else {\r\n            if (positionedIndexArr.includes(index)) {\r\n                color = \"#f9fb5a\";\r\n            } else {\r\n                if (index === i || index === j) {\r\n                    color = \"#ff5e5e\";\r\n                } else {\r\n                    if (index >= low && index < high) {\r\n                        if (arr[index] <= arr[pivot]) {\r\n                            color = \"#dda0dd\";\r\n                        } else {\r\n                            color = \"#ba55d3\";\r\n                        }\r\n                    } else {\r\n                        color = \"lightgreen\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (index === i && flag) {\r\n        return (\r\n            <Anime\r\n                duration={speed - 10}\r\n                translateX={translate * (j - i)}\r\n                easing={\"easeInOutQuad\"}\r\n            >\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            </Anime>\r\n        );\r\n    } else if (index === j && flag) {\r\n        return (\r\n            <Anime\r\n                duration={speed - 10}\r\n                translateX={-translate * (j - i)}\r\n                easing={\"easeInOutQuad\"}\r\n            >\r\n                <Bar\r\n                    key={index}\r\n                    Color={color}\r\n                    arr={arr}\r\n                    index={index}\r\n                    heightFactor={heightFactor}\r\n                    size={size}\r\n                    value={value}\r\n                    flag={sizeFlag}\r\n                />\r\n            </Anime>\r\n        );\r\n    } else {\r\n        return (\r\n            <Bar\r\n                key={index}\r\n                Color={color}\r\n                arr={arr}\r\n                index={index}\r\n                heightFactor={heightFactor}\r\n                size={size}\r\n                value={value}\r\n                flag={sizeFlag}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuickBrain;\r\n","import Anime from \"react-anime\";\r\nimport BubbleBrain from \"../brain/BubbleBrain\";\r\nimport HeapBrain from \"../brain/HeapBrain\";\r\nimport InsertBrain from \"../brain/InsertBrain\";\r\nimport MergeBrain from \"../brain/MergeBrain\";\r\nimport QuickBrain from \"../brain/QuickBrain\";\r\nimport Bar from \"./Bar\";\r\n\r\nfunction AnimGround(props) {\r\n    let arr = props.arr;\r\n\r\n    let heightFactor = 350 / props.max;\r\n\r\n    let size = arr.length;\r\n\r\n    let translate = 1000 / size;\r\n\r\n    let sizeFlag = false;\r\n\r\n    // if(Object.values(props).includes(\"states\")){\r\n    //     let {i, j, flag} = props.states;\r\n    // }\r\n\r\n    let speed = props.speed;\r\n\r\n    const strings = props.strings;\r\n\r\n    let isSorted = props.isSorted;\r\n\r\n    let { i, j, flag } = props.states;\r\n\r\n    let algoID = props.algoID;\r\n\r\n    if (size > 30) {\r\n        sizeFlag = true;\r\n    }\r\n\r\n    function selectBrain(index, value, i, j, flag, algoID) {\r\n        switch (algoID) {\r\n            case 1:\r\n                return BubbleBrain(\r\n                    index,\r\n                    value,\r\n                    i,\r\n                    j,\r\n                    flag,\r\n                    arr,\r\n                    heightFactor,\r\n                    size,\r\n                    translate,\r\n                    sizeFlag,\r\n                    speed,\r\n                    isSorted,\r\n                    props.BSI\r\n                );\r\n            case 2:\r\n                return InsertBrain(\r\n                    index,\r\n                    value,\r\n                    i,\r\n                    j,\r\n                    flag,\r\n                    props.insertionStates,\r\n                    arr,\r\n                    heightFactor,\r\n                    size,\r\n                    translate,\r\n                    sizeFlag,\r\n                    speed,\r\n                    isSorted\r\n                );\r\n            case 3:\r\n                return QuickBrain(\r\n                    index,\r\n                    value,\r\n                    i,\r\n                    j,\r\n                    flag,\r\n                    arr,\r\n                    heightFactor,\r\n                    size,\r\n                    translate,\r\n                    sizeFlag,\r\n                    speed,\r\n                    isSorted,\r\n                    props.positionedIndexArr,\r\n                    props.pivot,\r\n                    props.limits\r\n                );\r\n            case 4:\r\n                return HeapBrain(\r\n                    index,\r\n                    value,\r\n                    props.states,\r\n                    arr,\r\n                    heightFactor,\r\n                    size,\r\n                    translate,\r\n                    sizeFlag,\r\n                    speed,\r\n                    isSorted\r\n                );\r\n            case 5:\r\n                return MergeBrain(\r\n                    index,\r\n                    value,\r\n                    props.mergeStates,\r\n                    arr,\r\n                    heightFactor,\r\n                    size,\r\n                    translate,\r\n                    sizeFlag,\r\n                    speed,\r\n                    isSorted\r\n                );\r\n            default:\r\n                return (\r\n                    <Bar\r\n                        key={index}\r\n                        Color=\"lightgreen\"\r\n                        arr={arr}\r\n                        index={index}\r\n                        heightFactor={heightFactor}\r\n                        size={size}\r\n                        value={value}\r\n                        flag={sizeFlag}\r\n                    />\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"animContainer\">\r\n            {props.inProcess ? (\r\n                <Anime\r\n                    className={\"psTemp0\"}\r\n                    duration={speed - 10}\r\n                    scaleX={[0.0, 1.0]}\r\n                    easing={\"easeInOutQuad\"}\r\n                >\r\n                    <div className={\"psDiv\"}>\r\n                        {strings !== undefined &&\r\n                            strings.map((s, index) => {\r\n                                return (\r\n                                    <div\r\n                                        key={s}\r\n                                        style={{\r\n                                            backgroundColor:\r\n                                                index === props.psIndex &&\r\n                                                \"#6c69cc\",\r\n                                        }}\r\n                                    >\r\n                                        <p style={{ padding: 4 }}>{s}</p>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                    </div>\r\n                </Anime>\r\n            ) : (\r\n                props.isSorted && (\r\n                    <Anime\r\n                        className={\"psTemp0\"}\r\n                        duration={speed - 10}\r\n                        scaleX={[1.0, 0.0]}\r\n                        easing={\"easeInOutQuad\"}\r\n                    >\r\n                        <div className={\"psDiv\"}>\r\n                            {strings !== undefined &&\r\n                                strings.map((s, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={s}\r\n                                            style={{\r\n                                                backgroundColor:\r\n                                                    index === props.psIndex &&\r\n                                                    \"#6c69cc\",\r\n                                            }}\r\n                                        >\r\n                                            <p style={{ padding: 4 }}>{s}</p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                        </div>\r\n                    </Anime>\r\n                )\r\n            )}\r\n\r\n            <div className=\"anim\">\r\n                {/*<Anime delay={anime.stagger(50)} scale={[ 0.0, 1 ]}>*/}\r\n\r\n                <div\r\n                    className={\"bar\"}\r\n                    // style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignContent: \"flex-start\" }}\r\n                >\r\n                    {arr.map((value, index) => {\r\n                        return selectBrain(index, value, i, j, flag, algoID);\r\n                    })}\r\n                </div>\r\n\r\n                {isSorted && (\r\n                    <p align={\"end\"} style={{ paddingRight: \"10px\" }}>\r\n                        Actual execution time : {props.time}ms\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AnimGround;\r\n","import { useState } from 'react';\r\n\r\nfunction Controls(props) {\r\n\r\n    const [size, setSize] = useState(10);\r\n\r\n    const [speed, setSpeed] = useState(810 - props.speed);\r\n\r\n    const [onButton, setOnButton] = useState(false);\r\n\r\n    const [bgPosition, setbgPosition] = useState(\"0px 0px\");\r\n\r\n    let inProcess = props.inProcess;\r\n\r\n    const active = '#64c3ef'\r\n    const inactive = '#dbdbdb'\r\n\r\n    function inSubmit() {\r\n        setOnButton(true);\r\n    }\r\n\r\n    function outSubmit() {\r\n        setbgPosition(\"0px 0px\");\r\n        setOnButton(false);\r\n    }\r\n\r\n    function setSizeImpl(event) {\r\n        if (!inProcess) {\r\n            let temp = event.target.value;\r\n            props.setIsSorted(false);\r\n            setSize(temp);\r\n            props.update(temp);\r\n        }\r\n    }\r\n\r\n    function setSpeedImpl(event) {\r\n        if (!inProcess) {\r\n            let temp = event.target.value;\r\n            setSpeed(temp);\r\n            props.updateSpeed(810 - temp);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='controls'>\r\n            <button\r\n                style={{\r\n                    backgroundColor: inProcess ? \"grey\" : onButton ? \"#ff336a\" : \"black\",\r\n                    color: inProcess ? \"black\" : onButton && \"black\",\r\n                    borderRadius: \"30px\",\r\n                    fontSize: \"2.4vh\",\r\n                    height: \"70%\",\r\n                    fontWeight: 500,\r\n                    backgroundPosition: bgPosition,\r\n                }}\r\n                onMouseOver={inSubmit}\r\n                onMouseOut={outSubmit}\r\n                onMouseMove={(e) => {\r\n                    setbgPosition((e.clientX - 15) + 'px ' + (e.clientY - 15) + 'px');\r\n                }}\r\n                onClick={() => {\r\n                    if (!inProcess) {\r\n                        props.setIsSorted(false);\r\n                        props.update(size);\r\n                    }\r\n                }}\r\n                className={`newArrayButton ${onButton && \"extra\"}`}>\r\n                Create Random Array\r\n            </button>\r\n            <div>\r\n                <label className='labels' style={{ fontSize: \"2.4vh\", fontWeight: 500, }}>Array Size</label>\r\n                <input\r\n                    style={{\r\n                        background: !inProcess ? `linear-gradient(90deg, ${active} 0% ${(100 / 96) * (size - 4)}%, ${inactive} ${(100 / 96) * (size - 4)}% 100%)` : \"grey\"\r\n                    }}\r\n                    className={\"slider\"}\r\n                    onChange={setSizeImpl}\r\n                    type=\"range\" min=\"4\" max=\"100\" value={size}\r\n                    id=\"myRange\">\r\n                </input>\r\n            </div>\r\n            <div>\r\n                <label className='labels' style={{ fontSize: \"2.4vh\", fontWeight: 500, }}>Speed</label>\r\n                <input\r\n                    style={{\r\n                        background: !inProcess ? `linear-gradient(90deg, ${active} 0% ${(10 / 79) * (speed - 10)}%, ${inactive} ${(10 / 79) * (speed - 10)}% 100%)` : \"grey\"\r\n                    }}\r\n                    onChange={setSpeedImpl}\r\n                    className={\"slider\"}\r\n                    type=\"range\" min=\"10\" max=\"800\" value={speed}\r\n                    id=\"myRange\">\r\n                </input>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controls;","async function BubbleSort(\r\n    arr,\r\n    update,\r\n    speed,\r\n    setIsSorted,\r\n    setInProgress,\r\n    setTime,\r\n    setPsIndex\r\n) {\r\n    async function bubble(arr) {\r\n        let flag;\r\n\r\n        for (let i = 1; i < arr.length; i++) {\r\n            flag = false;\r\n            for (let j = 0; j < arr.length - i; j++) {\r\n                if (arr[j + 1] < arr[j]) {\r\n                    let temp = arr[j];\r\n                    arr[j] = arr[j + 1];\r\n                    arr[j + 1] = temp;\r\n                    flag = true;\r\n                }\r\n            }\r\n            if (!flag) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    let temp = [...arr];\r\n\r\n    // let st = new Date().getMilliseconds();\r\n    let st = performance.now();\r\n    // console.time('time');\r\n    await bubble(temp);\r\n    let et = performance.now();\r\n    // let et = new Date().getMilliseconds();\r\n\r\n    // console.timeEnd('time');\r\n\r\n    let flag;\r\n\r\n    let flag1;\r\n\r\n    for (let i = 1; i < arr.length; i++) {\r\n        flag = false;\r\n        for (let j = 0; j < arr.length - i; j++) {\r\n            flag1 = false;\r\n            setPsIndex(1);\r\n            if (arr[j] > arr[j + 1]) {\r\n                setPsIndex(2);\r\n                update(arr, i, j, j + 1, true);\r\n                let temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n                flag = true;\r\n                flag1 = true;\r\n            }\r\n\r\n            if (!flag1) {\r\n                update(arr, i, j, j + 1, false);\r\n            }\r\n\r\n            await new Promise((done) => setTimeout(() => done(), speed));\r\n            update(arr, i, j, j + 1, false);\r\n        }\r\n        if (!flag) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    setPsIndex(-1);\r\n\r\n    update(arr, -1, -1, -1, false);\r\n    setTime((et - st).toFixed(2));\r\n    setIsSorted(true);\r\n    setInProgress(false);\r\n}\r\n\r\nexport default BubbleSort;\r\n","async function InsertionSort(\r\n    arr,\r\n    update,\r\n    speed,\r\n    setIsSorted,\r\n    setInProgress,\r\n    setTime,\r\n    setPsIndex\r\n) {\r\n    async function insertion(arr) {\r\n        for (let i = 1; i < arr.length; i++) {\r\n            let temp = arr[i];\r\n\r\n            let j = i - 1;\r\n\r\n            while (j >= 0 && arr[j] > temp) {\r\n                arr[j + 1] = arr[j];\r\n                j--;\r\n            }\r\n\r\n            arr[j + 1] = temp;\r\n        }\r\n    }\r\n\r\n    let temp = [...arr];\r\n\r\n    // let st = new Date().getMilliseconds();\r\n    let st = performance.now();\r\n    // console.time('time');\r\n    await insertion(temp);\r\n    let et = performance.now();\r\n    // let et = new Date().getMilliseconds();\r\n\r\n    // console.timeEnd('time');\r\n\r\n    /**\r\n     * Update Params:\r\n     * 1st -> array\r\n     * 2nd -> preceding element\r\n     * 3rd -> current element\r\n     * 4th -> Horizontal 0 / Only Vertical 1\r\n     * 5th -> Down 0 / Up 1\r\n     * 6th -> Without Animation 0 / With animation 1\r\n     * 7th -> No Swap False / Swap True\r\n     */\r\n\r\n    for (let i = 1; i < arr.length; i++) {\r\n        setPsIndex(1);\r\n        let value = arr[i];\r\n        let j = i - 1;\r\n        update(arr, -1, j + 1, 1, 0, 1, i, false);\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n        setPsIndex(2);\r\n        while (j >= 0 && arr[j] > value) {\r\n            setPsIndex(3);\r\n            update(arr, j, j + 1, 0, 0, 0, i + 1, true);\r\n            await new Promise((done) => setTimeout(() => done(), speed));\r\n            arr[j + 1] = arr[j];\r\n            arr[j] = value;\r\n            update(arr, -1, j, 1, 0, 0, i + 1, false);\r\n            j--;\r\n        }\r\n        setPsIndex(4);\r\n        arr[j + 1] = value;\r\n        update(arr, -1, j + 1, 1, 1, 1, i + 1, false);\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n        update(arr, -1, -1, -1, -1, -1, i + 1, false);\r\n        // await new Promise(done => setTimeout(() => done(), speed));\r\n    }\r\n    setPsIndex(-1);\r\n    update(arr, -1, -1, -1, -1, -1, -1, false);\r\n    setTime((et - st).toFixed(2));\r\n    setIsSorted(true);\r\n    setInProgress(false);\r\n}\r\n\r\nexport default InsertionSort;\r\n","/**\r\n * Update Params:\r\n * 1st -> Array\r\n * 2nd -> low\r\n * 3rd -> mid\r\n * 4th -> k\r\n * 5th -> left array current index\r\n * 6th -> right array current index\r\n * 7th -> 0 Element from left array / 1 element from right array\r\n * 8th -> 0 Down translate / 1 Up translate\r\n * 9th -> index already sorted in current session\r\n * 10th -> translation of element from its initial position\r\n * 11th -> Elements that have been partially sorted with given color\r\n * 12th -> Colors of individual elements\r\n */\r\n\r\nasync function MergeSort(\r\n    arr,\r\n    update,\r\n    speed,\r\n    setIsSorted,\r\n    setInProgress,\r\n    colorEleArr,\r\n    colorArr,\r\n    setTime,\r\n    setPsIndex\r\n) {\r\n    async function mergeSort1(arr, low, high) {\r\n        if (low < high) {\r\n            let m = low + (high - low) / 2;\r\n\r\n            await mergeSort1(arr, low, m);\r\n            await mergeSort1(arr, m + 1, high);\r\n\r\n            await merge1(arr, low, m, high);\r\n        }\r\n    }\r\n\r\n    async function merge1(arr, low, mid, high) {\r\n        let n1 = mid - low + 1;\r\n        let n2 = high - mid;\r\n\r\n        let left = [];\r\n        let right = [];\r\n\r\n        for (let i = 0; i < n1; i++) {\r\n            left.push(arr[low + i]);\r\n        }\r\n\r\n        for (let i = 0; i < n2; i++) {\r\n            right.push(arr[mid + i + 1]);\r\n        }\r\n\r\n        let i = 0,\r\n            j = 0;\r\n\r\n        let k = low;\r\n\r\n        while (i < n1 && j < n2) {\r\n            if (left[i] <= right[j]) {\r\n                arr[k] = left[i];\r\n                i++;\r\n            } else {\r\n                arr[k] = right[j];\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < n1) {\r\n            arr[k] = left[i];\r\n            i++;\r\n            k++;\r\n        }\r\n\r\n        while (j < n2) {\r\n            arr[k] = right[j];\r\n            j++;\r\n            k++;\r\n        }\r\n    }\r\n\r\n    let temp = [...arr];\r\n\r\n    // let st = new Date().getMilliseconds();\r\n    let st = performance.now();\r\n    // console.time('time');\r\n    await mergeSort1(temp);\r\n    let et = performance.now();\r\n    // let et = new Date().getMilliseconds();\r\n\r\n    // console.timeEnd('time');\r\n\r\n    await mergeSort(\r\n        arr,\r\n        0,\r\n        arr.length - 1,\r\n        update,\r\n        speed,\r\n        colorEleArr,\r\n        colorArr,\r\n        setPsIndex\r\n    );\r\n\r\n    update(arr, -1, -1, -1, -1, -1, -1, -1, [], [], [], []);\r\n    setTime((et - st).toFixed(2));\r\n    setIsSorted(true);\r\n    setInProgress(false);\r\n}\r\n\r\nasync function mergeSort(\r\n    arr,\r\n    low,\r\n    high,\r\n    update,\r\n    speed,\r\n    colorEleArr,\r\n    colorArr,\r\n    setPsIndex\r\n) {\r\n    if (low < high) {\r\n        let m = low + Math.floor((high - low) / 2);\r\n\r\n        await mergeSort(\r\n            arr,\r\n            low,\r\n            m,\r\n            update,\r\n            speed,\r\n            colorEleArr,\r\n            colorArr,\r\n            setPsIndex\r\n        );\r\n        await mergeSort(\r\n            arr,\r\n            m + 1,\r\n            high,\r\n            update,\r\n            speed,\r\n            colorEleArr,\r\n            colorArr,\r\n            setPsIndex\r\n        );\r\n\r\n        await merge(\r\n            arr,\r\n            low,\r\n            m,\r\n            high,\r\n            update,\r\n            speed,\r\n            colorEleArr,\r\n            colorArr,\r\n            setPsIndex\r\n        );\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n    }\r\n}\r\n\r\nasync function merge(\r\n    arr,\r\n    low,\r\n    mid,\r\n    high,\r\n    update,\r\n    speed,\r\n    colorEleArr,\r\n    colorArr,\r\n    setPsIndex\r\n) {\r\n    setPsIndex(1);\r\n    await new Promise((done) => setTimeout(() => done(), speed));\r\n\r\n    let n1 = mid - low + 1;\r\n    let n2 = high - mid;\r\n\r\n    let isPositioned = [];\r\n    let isPositionedTx = [];\r\n\r\n    let left = [];\r\n    let right = [];\r\n\r\n    for (let i = 0; i < n1; i++) {\r\n        left.push(arr[low + i]);\r\n    }\r\n\r\n    for (let i = 0; i < n2; i++) {\r\n        right.push(arr[mid + i + 1]);\r\n    }\r\n\r\n    let i = 0,\r\n        j = 0;\r\n\r\n    let k = 0;\r\n\r\n    let temp = [...arr];\r\n\r\n    while (i < n1 && j < n2) {\r\n        if (left[i] <= right[j]) {\r\n            // console.log(\"lefty form \" + (k - i));\r\n            setPsIndex(2);\r\n            update(\r\n                temp,\r\n                low,\r\n                mid,\r\n                k,\r\n                i,\r\n                j,\r\n                0,\r\n                0,\r\n                isPositioned,\r\n                isPositionedTx,\r\n                colorEleArr,\r\n                colorArr\r\n            );\r\n            await new Promise((done) => setTimeout(() => done(), speed));\r\n            arr[k + low] = left[i];\r\n            isPositioned.push(low + i);\r\n            isPositionedTx.push(k - i);\r\n            // console.log(\"isPositioned post\" + isPositioned);\r\n            i++;\r\n        } else {\r\n            // console.log(\"righty form \" + ((low + k) - (mid + j + 1)));\r\n            setPsIndex(3);\r\n            update(\r\n                temp,\r\n                low,\r\n                mid,\r\n                k,\r\n                i,\r\n                j,\r\n                1,\r\n                0,\r\n                isPositioned,\r\n                isPositionedTx,\r\n                colorEleArr,\r\n                colorArr\r\n            );\r\n            await new Promise((done) => setTimeout(() => done(), speed));\r\n            arr[k + low] = right[j];\r\n            isPositioned.push(mid + j + 1);\r\n            isPositionedTx.push(low + k - (mid + j + 1));\r\n            // console.log(\"isPositioned post\" + isPositioned);\r\n            j++;\r\n        }\r\n        k++;\r\n    }\r\n\r\n    while (i < n1) {\r\n        // console.log(\"lefty form \" + (k - i));\r\n        setPsIndex(2);\r\n        update(\r\n            temp,\r\n            low,\r\n            mid,\r\n            k,\r\n            i,\r\n            j,\r\n            0,\r\n            0,\r\n            isPositioned,\r\n            isPositionedTx,\r\n            colorEleArr,\r\n            colorArr\r\n        );\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n        arr[k + low] = left[i];\r\n        isPositioned.push(low + i);\r\n        isPositionedTx.push(k - i);\r\n        // console.log(\"isPositioned post\" + isPositioned);\r\n        i++;\r\n        k++;\r\n    }\r\n\r\n    while (j < n2) {\r\n        // console.log(\"righty form \" + ((low + k) - (mid + j + 1)));\r\n        setPsIndex(3);\r\n        update(\r\n            temp,\r\n            low,\r\n            mid,\r\n            k,\r\n            i,\r\n            j,\r\n            1,\r\n            0,\r\n            isPositioned,\r\n            isPositionedTx,\r\n            colorEleArr,\r\n            colorArr\r\n        );\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n        arr[k + low] = right[j];\r\n        isPositioned.push(mid + j + 1);\r\n        isPositionedTx.push(low + k - (mid + j + 1));\r\n        // console.log(\"isPositioned post\" + isPositioned);\r\n        j++;\r\n        k++;\r\n    }\r\n\r\n    setPsIndex(4);\r\n\r\n    update(\r\n        temp,\r\n        low,\r\n        mid,\r\n        k,\r\n        i,\r\n        j,\r\n        -1,\r\n        1,\r\n        isPositioned,\r\n        isPositionedTx,\r\n        colorEleArr,\r\n        colorArr\r\n    );\r\n    await new Promise((done) => setTimeout(() => done(), speed));\r\n\r\n    // if(colorEleArr.some(row => row.includes(isPositioned[0]))){\r\n\r\n    for (let i = 0; i < isPositioned.length; i++) {\r\n        for (let j = 0; j < colorEleArr.length; j++) {\r\n            if (colorEleArr[j].includes(isPositioned[i])) {\r\n                // console.log(\"removing \" + colorEleArr[j]);\r\n                colorEleArr.splice(j);\r\n                colorArr.splice(j);\r\n            }\r\n        }\r\n    }\r\n\r\n    // for(let i=0;i<colorEleArr.length;i++){\r\n    //     if(colorEleArr[i][0] === isPositioned[0]){\r\n    //         console.log(\"removing\");\r\n    //         colorEleArr.splice(i);\r\n    //         colorArr.splice(i);\r\n    //         break;\r\n    //     }\r\n    // }\r\n    colorEleArr.push(isPositioned);\r\n\r\n    // let randomColor = Math.floor(Math.random()*16777215).toString(16);\r\n\r\n    function getRandomColor() {\r\n        var letters = \"45789ABCD\".split(\"\");\r\n        var color = \"#\";\r\n        for (var i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * letters.length)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n    // let i1=0;\r\n    // while(i1 !== 6-randomColor.length){\r\n    //     color += \"0\";\r\n    //     i1++;\r\n    // }\r\n\r\n    // color += randomColor;\r\n\r\n    colorArr.push(getRandomColor());\r\n\r\n    // console.log(\"colorEleArr \" + colorEleArr.toString);\r\n    // console.log(\"ispositioned\" + isPositioned);\r\n\r\n    setPsIndex(-1);\r\n\r\n    update(arr, -1, -1, -1, -1, -1, -1, -1, [], [], colorEleArr, colorArr);\r\n    // await new Promise(done => setTimeout(() => done(), speed));\r\n}\r\n\r\nexport default MergeSort;\r\n","/**\r\n * Update Params:\r\n * 1st -> Array\r\n * 2nd -> index of first value greater than pivot\r\n * 3rd -> index of current element being compared\r\n * 4th -> index of pivot element\r\n * 5th -> boolean for swap (true - swap, false - not swap)\r\n * 6th -> array containing indices of elements on the correct position\r\n * 7th -> low\r\n * 8th -> index of current element (till where the purple color should appear)\r\n */\r\n\r\nlet positionedIndexArr = [];\r\n\r\nasync function QuickSort(\r\n    arr,\r\n    low,\r\n    high,\r\n    update,\r\n    speed,\r\n    setIsSorted,\r\n    setInProgress,\r\n    setTime,\r\n    setPsIndex\r\n) {\r\n    async function partition1(arr, low, high) {\r\n        let pivot = arr[high];\r\n\r\n        let i = low - 1;\r\n\r\n        for (let j = low; j <= high; j++) {\r\n            if (arr[j] < pivot) {\r\n                i++;\r\n                let temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp;\r\n            }\r\n        }\r\n\r\n        let temp = arr[i + 1];\r\n        arr[i + 1] = arr[high];\r\n        arr[high] = temp;\r\n\r\n        return i + 1;\r\n    }\r\n\r\n    async function quick(arr, low, high) {\r\n        if (low < high) {\r\n            let part = await partition1(arr, low, high);\r\n\r\n            await quick(arr, low, part - 1);\r\n            await quick(arr, part + 1, high);\r\n        }\r\n    }\r\n\r\n    let temp = [...arr];\r\n\r\n    // let st = new Date().getMilliseconds();\r\n    let st = performance.now();\r\n    // console.time('time');\r\n    await quick(temp);\r\n    let et = performance.now();\r\n    // let et = new Date().getMilliseconds();\r\n\r\n    // console.timeEnd('time');\r\n\r\n    await QuickSortImpl(arr, low, high, update, speed, setPsIndex);\r\n    positionedIndexArr = [];\r\n    setPsIndex(-1);\r\n    update(arr, -1, -1, -1, false, positionedIndexArr, -1, -1);\r\n    setTime((et - st).toFixed(2));\r\n    setIsSorted(true);\r\n    setInProgress(false);\r\n}\r\n\r\nasync function QuickSortImpl(arr, low, high, update, speed, setPsIndex) {\r\n    if (low < high) {\r\n        let index = await partition(arr, low, high, update, speed, setPsIndex);\r\n        await QuickSortImpl(arr, low, index - 1, update, speed, setPsIndex);\r\n        positionedIndexArr.push(low);\r\n        await QuickSortImpl(arr, index + 1, high, update, speed, setPsIndex);\r\n        positionedIndexArr.push(index + 1);\r\n    }\r\n}\r\n\r\nasync function partition(arr, low, high, update, speed, setPsIndex) {\r\n    setPsIndex(0);\r\n    await new Promise((done) => setTimeout(() => done(), speed));\r\n\r\n    let pivot = arr[high]; //element that goes to desired position\r\n    let i = low - 1;\r\n    update(arr, -1, -1, high, false, positionedIndexArr, low, high);\r\n    setPsIndex(1);\r\n    // await new Promise(done => setTimeout(() => done(), speed));\r\n    for (let j = low; j <= high - 1; j++) {\r\n        setPsIndex(2);\r\n        // await new Promise(done => setTimeout(() => done(), speed));\r\n        if (arr[j] <= pivot) {\r\n            setPsIndex(3);\r\n            i++;\r\n            update(arr, i, j, high, true, positionedIndexArr, low, j);\r\n            await new Promise((done) => setTimeout(() => done(), speed));\r\n            let temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n            update(arr, i, j, high, false, positionedIndexArr, low, high);\r\n        } else {\r\n            update(arr, i + 1, j, high, false, positionedIndexArr, low, j);\r\n            await new Promise((done) => setTimeout(() => done(), speed));\r\n        }\r\n    }\r\n    setPsIndex(4);\r\n    update(arr, i + 1, high, high, true, positionedIndexArr, low, high);\r\n    positionedIndexArr.push(i + 1);\r\n    await new Promise((done) => setTimeout(() => done(), speed));\r\n    let temp = arr[i + 1];\r\n    arr[i + 1] = arr[high];\r\n    arr[high] = temp;\r\n    update(arr, i + 1, high, i + 1, false, positionedIndexArr, low, high);\r\n    return i + 1;\r\n}\r\n\r\nexport default QuickSort;\r\n","let sortedIndex = [];\r\n\r\nasync function HeapSort(\r\n    arr,\r\n    update,\r\n    speed,\r\n    setIsSorted,\r\n    setInProgress,\r\n    setTime,\r\n    setPsIndex\r\n) {\r\n    async function heapify(arr, i, n) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && arr[l] > arr[largest]) {\r\n            largest = l;\r\n        }\r\n\r\n        if (r < n && arr[r] > arr[largest]) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            let temp = arr[i];\r\n            arr[i] = arr[largest];\r\n            arr[largest] = temp;\r\n            await heapify(arr, largest, n);\r\n        }\r\n    }\r\n\r\n    async function heapSort(arr) {\r\n        let n = arr.length;\r\n\r\n        for (let j = n / 2 - 1; j >= 1; j--) {\r\n            await heapify(arr, j, n);\r\n        }\r\n\r\n        for (let i = n - 1; i > 0; i--) {\r\n            let temp = arr[0];\r\n            arr[0] = arr[i];\r\n            arr[i] = temp;\r\n\r\n            await heapify(arr, 0, i);\r\n        }\r\n    }\r\n\r\n    let temp = [...arr];\r\n\r\n    // let st = new Date().getMilliseconds();\r\n    let st = performance.now();\r\n    // console.time('time');\r\n    await heapSort(temp);\r\n    let et = performance.now();\r\n    // let et = new Date().getMilliseconds();\r\n\r\n    // console.timeEnd('time');\r\n\r\n    let size = arr.length;\r\n\r\n    setPsIndex(0);\r\n\r\n    for (let i = Math.floor(size / 2) - 1; i >= 0; i--) {\r\n        await maxHeapify(arr, size, i, update, speed);\r\n    }\r\n    for (let i = size - 1; i >= 1; i--) {\r\n        setPsIndex(3);\r\n        update(arr, 0, i, sortedIndex, true, false);\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n        sortedIndex.push(i);\r\n        let temp = arr[0];\r\n        arr[0] = arr[i];\r\n        arr[i] = temp;\r\n        update(arr, i, 0, sortedIndex, false, false);\r\n        setPsIndex(4);\r\n        await maxHeapify(arr, i, 0, update, speed);\r\n    }\r\n    setPsIndex(-1);\r\n    sortedIndex = [];\r\n    update(arr, -1, -1, sortedIndex, false, false);\r\n    setTime((et - st).toFixed(2));\r\n    setIsSorted(true);\r\n    setInProgress(false);\r\n}\r\n\r\nasync function maxHeapify(array, size, l, update, speed) {\r\n    let largest = l;\r\n    let left = 2 * l + 1;\r\n    let right = 2 * l + 2;\r\n\r\n    if (left < size && array[left] > array[largest]) {\r\n        largest = left;\r\n    }\r\n\r\n    if (right < size && array[right] > array[largest]) {\r\n        largest = right;\r\n    }\r\n\r\n    if (largest !== l) {\r\n        update(array, l, largest, sortedIndex, true, true);\r\n        await new Promise((done) => setTimeout(() => done(), speed));\r\n        let temp = array[l];\r\n        array[l] = array[largest];\r\n        array[largest] = temp;\r\n        update(array, l, largest, sortedIndex, false, true);\r\n        await maxHeapify(array, size, largest, update, speed);\r\n    }\r\n}\r\nexport default HeapSort;\r\n","import { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport BubbleSort from \"../algorithms/BubbleSort\";\r\nimport InsertionSort from \"../algorithms/InsertionSort\";\r\nimport MergeSort from '../algorithms/MergeSort';\r\nimport QuickSort from '../algorithms/QuickSort';\r\nimport HeapSort from '../algorithms/HeapSort';\r\nimport { useState } from 'react';\r\n\r\nfunction Footer(props) {\r\n\r\n    // const [onAboutButton, setAboutOnButton] = useState(false);\r\n    //\r\n    // const [onTeamButton, setTeamOnButton] = useState(false);\r\n\r\n    const [onButton, setOnButton] = useState(false);\r\n\r\n    const [bgPosition, setbgPosition] = useState(\"0px 0px\");\r\n\r\n    let isSorted = props.isSorted;\r\n\r\n    let inProcess = props.inProcess;\r\n\r\n    function inSubmit() {\r\n        setOnButton(true);\r\n    }\r\n\r\n    function outSubmit() {\r\n        setbgPosition(\"0px 0px\");\r\n        setOnButton(false);\r\n    }\r\n\r\n    // const[clicked, setClicked] = useState(false);\r\n\r\n    // function inAboutUs() {\r\n    //     setAboutOnButton(true);\r\n    // }\r\n    //\r\n    // function outAboutUs() {\r\n    //     setAboutOnButton(false);\r\n    // }\r\n    //\r\n    // function inTeam() {\r\n    //     setTeamOnButton(true);\r\n    // }\r\n    //\r\n    // function outTeam() {\r\n    //     setTeamOnButton(false);\r\n    // }\r\n    toast.configure();\r\n    async function setClickedImpl() {\r\n        if (!isSorted && !inProcess) {\r\n            // setClicked(isSorted);\r\n            props.setInProcess(true);\r\n            switch (props.algoID) {\r\n                case 1:\r\n                    await BubbleSort(props.arr, props.update, props.speed, props.setIsSorted, props.setInProcess, props.setTime, props.setPsIndex);\r\n                    break;\r\n                case 2:\r\n                    await InsertionSort(props.arr, props.update, props.speed, props.setIsSorted, props.setInProcess, props.setTime, props.setPsIndex);\r\n                    break;\r\n                case 3:\r\n                    await QuickSort(props.arr, 0, props.arr.length - 1, props.update, props.speed, props.setIsSorted, props.setInProcess, props.setTime, props.setPsIndex);\r\n                    break;\r\n                case 4:\r\n                    await HeapSort(props.arr, props.update, props.speed, props.setIsSorted, props.setInProcess, props.setTime, props.setPsIndex);\r\n                    break;\r\n                case 5:\r\n                    await MergeSort(props.arr, props.update, props.speed, props.setIsSorted, props.setInProcess, props.colorEleArr, props.colorArr, props.setTime, props.setPsIndex);\r\n                    break;\r\n                default:\r\n                    toast(\"Select an Algorithm\", { position: toast.POSITION.BOTTOM_RIGHT, autoClose: 2000 });\r\n                    props.setInProcess(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"footer\"} >\r\n\r\n            <div className={\"col\"} style={{ textAlign: \"center\", height: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                <button\r\n                    className={`sortButton ${onButton && \"extra\"}`}\r\n                    onClick={setClickedImpl}\r\n                    onMouseOver={inSubmit}\r\n                    onMouseOut={outSubmit}\r\n                    onMouseMove={(e) => {\r\n                        setbgPosition((e.clientX - 15) + 'px ' + (e.clientY - 15) + 'px');\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: inProcess || isSorted ? \"grey\" : \"#1ec773\",\r\n                        borderRadius: \"10px\",\r\n                        fontSize: \"2.4vh\",\r\n                        fontWeight: 500,\r\n                        backgroundPosition: bgPosition,\r\n                    }}\r\n                >\r\n                    Sort!\r\n                </button>\r\n            </div>\r\n\r\n            {/*<div className={\"col-lg-4\"} style={{textAlign: \"end\"}}>*/}\r\n            {/*    <div className=\"row\">*/}\r\n            {/*        <div className=\"col offset-5\">*/}\r\n            {/*            <button className={\"rightFooterContents align-middle\"}*/}\r\n            {/*                    onMouseOver={inAboutUs}*/}\r\n            {/*                    onMouseOut={outAboutUs}*/}\r\n            {/*                    style={*/}\r\n            {/*                        {*/}\r\n            {/*                            color: onAboutButton && \"black\"*/}\r\n            {/*                        }*/}\r\n            {/*                    }*/}\r\n            {/*            >*/}\r\n            {/*                About*/}\r\n            {/*            </button>*/}\r\n            {/*        </div>*/}\r\n            {/*        <div className=\"col\">*/}\r\n            {/*            <button className={\"rightFooterContents align-middle\"}*/}\r\n            {/*                    onMouseOver={inTeam}*/}\r\n            {/*                    onMouseOut={outTeam}*/}\r\n            {/*                    style={*/}\r\n            {/*                        {*/}\r\n            {/*                            color: onTeamButton && \"black\"*/}\r\n            {/*                        }*/}\r\n            {/*                    }*/}\r\n            {/*            >*/}\r\n            {/*                Team*/}\r\n            {/*            </button>*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Footer;","import { useState } from \"react\";\r\n\r\nfunction AlgoButton(props) {\r\n\r\n    const [onButton, setOnButton] = useState(false);\r\n\r\n    const [clicked, setClicked] = useState(false);\r\n\r\n    const [bgPosition, setbgPosition] = useState(\"0px 0px\");\r\n\r\n    function inSubmit() {\r\n        setOnButton(true);\r\n    }\r\n\r\n    function outSubmit() {\r\n        setbgPosition(\"0px 0px\");\r\n        setOnButton(false);\r\n    }\r\n\r\n    return (\r\n        <button className={`algoButtons ${onButton && \"extra\"}`}\r\n            onMouseOver={inSubmit}\r\n            onMouseOut={outSubmit}\r\n            onMouseMove={(e) => {\r\n                setbgPosition((e.clientX - 15) + 'px ' + (e.clientY - 15) + 'px');\r\n            }}\r\n            onClick={() => {\r\n                if (!props.inProcess) {\r\n                    setClicked(false);\r\n                    props.setAlgoImpl(-1);\r\n                    setClicked(true);\r\n                    props.setAlgoImpl(props.id);\r\n                }\r\n            }}\r\n            style={\r\n                {\r\n                    marginLeft: props.name === \"Bubble Sort\" ? \"auto\" : \"40px\",\r\n                    fontWeight: 500,\r\n                    backgroundColor:\r\n                        clicked && (props.id === props.sa) ? \"#3BBF7D\" : props.inProcess ? \"grey\" : (onButton ? \"#ff336a\" : \"black\"),\r\n                    // cursor: onButton && \"default\",\r\n                    color: !props.inProcess && onButton && \"black\",\r\n                    backgroundPosition: bgPosition,\r\n                }\r\n            }>\r\n            {props.name}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default AlgoButton;","export default __webpack_public_path__ + \"static/media/sortingLogo.02a6098a.png\";","import AlgoButton from \"./AlgoButton\";\r\nimport { useState } from \"react\";\r\nimport logo from \"../../src/sortingLogo.png\";\r\n\r\nfunction Header(props) {\r\n\r\n    const [selectedAlgo, setAlgo] = useState(-1);\r\n\r\n    const [bgPosition, setbgPosition] = useState(\"0px 0px\");\r\n\r\n    function setAlgoImpl(i) {\r\n        props.algoID(i);\r\n        setAlgo(i);\r\n    }\r\n\r\n    return (\r\n        <div className={\"head\"} style={{ display: \"flex\", backgroundPosition: bgPosition, }}\r\n            onMouseMove={(e) => {\r\n                setbgPosition((e.clientX - 15) + 'px ' + (e.clientY - 15) + 'px');\r\n            }}\r\n            onMouseOut={() => {\r\n                setbgPosition(\"-1px -1px\");\r\n            }}\r\n        >\r\n            <img\r\n                src={logo}\r\n                alt=\"Logo\"\r\n                height={48}\r\n                style={{\r\n                    paddingLeft: \"27px\"\r\n                }}\r\n            />\r\n            <AlgoButton\r\n                name={\"Bubble Sort\"}\r\n                id={1}\r\n                sa={selectedAlgo}\r\n                setAlgoImpl={setAlgoImpl}\r\n                inProcess={props.inProcess}\r\n            />\r\n            <AlgoButton\r\n                name={\"Insertion Sort\"}\r\n                id={2}\r\n                setAlgoImpl={setAlgoImpl}\r\n                sa={selectedAlgo}\r\n                inProcess={props.inProcess}\r\n            />\r\n            <AlgoButton\r\n                name={\"Quick Sort\"}\r\n                id={3}\r\n                setAlgoImpl={setAlgoImpl}\r\n                sa={selectedAlgo}\r\n                inProcess={props.inProcess}\r\n            />\r\n            <AlgoButton\r\n                name={\"Heap Sort\"}\r\n                id={4}\r\n                setAlgoImpl={setAlgoImpl}\r\n                sa={selectedAlgo}\r\n                inProcess={props.inProcess}\r\n            />\r\n            <AlgoButton\r\n                name={\"Merge Sort\"}\r\n                id={5}\r\n                setAlgoImpl={setAlgoImpl}\r\n                sa={selectedAlgo}\r\n                inProcess={props.inProcess}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","\r\nfunction createArray(size) {\r\n\r\n    const arr = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        arr.push(Math.floor(Math.random() * 100) + 1);\r\n    }\r\n\r\n    return arr;\r\n\r\n}\r\n\r\nexport default createArray;","\r\nfunction getPseudo(id) {\r\n    let strings = [];\r\n    if (id === 1) {\r\n        strings.push('for i=1 to ArrayLength-1');\r\n        strings.push('\\u2003if (leftElement > rightElement)');\r\n        strings.push('\\u2003\\u2003swap (leftElement, rightElement)');\r\n    }\r\n    else if (id === 2) {\r\n        strings.push('for i=1 to ArrayLength-1');\r\n        strings.push('\\u2003key = Extract ith element');\r\n        strings.push('\\u2003while (leftElement > key)');\r\n        strings.push('\\u2003\\u2003shift leftElement to right by 1 place');\r\n        strings.push('\\u2003place key at this index');\r\n    }\r\n    else if (id === 3) {\r\n        strings.push('pivot = partition lastElement; index = partition startIndex-1');\r\n        strings.push('for i=startIndex to endIndex-1');\r\n        strings.push('\\u2003if(arr[i] < pivot)');\r\n        strings.push('\\u2003\\u2003 index++; swap (arr[i], arr[index])');\r\n        strings.push('swap(pivot, arr[index+1]');\r\n    }\r\n    else if (id === 4) {\r\n        strings.push('create max Heap of Array');\r\n        strings.push('for i=ArrayLength-1 to 1');\r\n        strings.push('\\u2003key = ith element');\r\n        strings.push('\\u2003swap (firstElement, key)');\r\n        strings.push('\\u2003heapify remaining array');\r\n    }\r\n    else if (id === 5) {\r\n        strings.push('divide array into smaller partitions');\r\n        strings.push('merge called on adjacent partitions (left and right)');\r\n        // strings.push('split partition into left and right');\r\n        strings.push('if leftHead <= rightHead : copy leftHead');\r\n        strings.push('else: copy rightHead');\r\n        strings.push('place back elements into array');\r\n    }\r\n    return strings;\r\n}\r\n\r\nexport default getPseudo;","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useState } from \"react\";\r\nimport AnimGround from \"./components/AnimGround\";\r\nimport Controls from \"./components/Controls\";\r\nimport Footer from \"./components/Footer\";\r\nimport Header from \"./components/Header\";\r\nimport createArray from \"./CreatingArr\";\r\nimport getPseudo from \"./getPseudo\";\r\n\r\nlet arr0;\r\nlet value = true;\r\n\r\nfunction App() {\r\n    const [arr, setArr] = useState(createArray(10));\r\n\r\n    const [strings, setStrings] = useState([]);\r\n\r\n    const [psIndex, setPsIndex] = useState(-1);\r\n\r\n    if (value) {\r\n        arr0 = [...arr];\r\n        value = false;\r\n    }\r\n\r\n    const [speed, setSpeed] = useState(300);\r\n\r\n    // useEffect(() => {\r\n    //     // console.log(arr);\r\n    //     // console.log('setArr is called');\r\n    //     console.log('update' + arr0);\r\n    // }, [arr0]);\r\n\r\n    const [states, setStates] = useState({\r\n        i: -1,\r\n        j: -1,\r\n        flag: false,\r\n    });\r\n\r\n    const [inProcess, setInProcess] = useState(false);\r\n\r\n    const [isSorted, setIsSorted] = useState(false);\r\n\r\n    const [time, setTime] = useState(0);\r\n\r\n    const [selectedAlgo, setAlgo] = useState(-1);\r\n\r\n    const [bubbleSortedIndex, setBSI] = useState(-1);\r\n\r\n    const [insertStates, setInsertStates] = useState({\r\n        f1: -1,\r\n        f2: -1,\r\n        f3: -1,\r\n        insertSI: -1,\r\n    });\r\n\r\n    const [mergeStates, setMergeStates] = useState({\r\n        low: -1,\r\n        mid: -1,\r\n        k: -1,\r\n        i: -1,\r\n        j: -1,\r\n        f1: -1,\r\n        isPositioned: [],\r\n        isPositionedTx: [],\r\n        colorEleArr: [],\r\n        colorArr: [],\r\n    });\r\n\r\n    const [positionedIndexArr, setPositionedIndexArr] = useState([]);\r\n\r\n    const [pivotElement, setPivot] = useState(-1);\r\n\r\n    const [partitionLimits, setLimits] = useState({\r\n        low: -1,\r\n        high: -1,\r\n    });\r\n\r\n    const [heapStates, setHeapStates] = useState({\r\n        i: -1,\r\n        j: -1,\r\n        sortedIndex: [],\r\n        flag: false,\r\n        heapify: false,\r\n    });\r\n\r\n    function setAlgoImpl(i) {\r\n        if (selectedAlgo === -1) {\r\n            arr0 = [...arr];\r\n        } else {\r\n            setArr([...arr0]);\r\n            setInProcessImpl(false);\r\n            setIsSortedImpl(false);\r\n        }\r\n        setStrings(getPseudo(i));\r\n        setAlgo(i);\r\n    }\r\n\r\n    function setIsSortedImpl(flag) {\r\n        setIsSorted(flag);\r\n    }\r\n\r\n    function setTimeImpl(time) {\r\n        setTime(time);\r\n    }\r\n\r\n    function setInProcessImpl(flag) {\r\n        setInProcess(flag);\r\n    }\r\n\r\n    function updateArr(size) {\r\n        value = true;\r\n        setArr(createArray(size));\r\n    }\r\n\r\n    function setSpeedImpl(speed) {\r\n        setSpeed(speed);\r\n    }\r\n\r\n    function modifyArrBubble(array, w, x, y, flagg) {\r\n        setArr([...array]);\r\n        setBSI(w);\r\n        setStates({\r\n            i: x,\r\n            j: y,\r\n            flag: flagg,\r\n        });\r\n        // console.log(w);\r\n    }\r\n\r\n    function modifyArrInsert(array, x, y, f1, f2, f3, insertSI, flagg) {\r\n        setArr([...array]);\r\n        setStates({\r\n            i: x,\r\n            j: y,\r\n            flag: flagg,\r\n        });\r\n        setInsertStates({\r\n            f1: f1,\r\n            f2: f2,\r\n            f3: f3,\r\n            insertSI: insertSI,\r\n        });\r\n    }\r\n\r\n    function modifyArrQuick(\r\n        array,\r\n        x,\r\n        y,\r\n        pivot,\r\n        flagg,\r\n        positionedIndexArr,\r\n        low,\r\n        high\r\n    ) {\r\n        setArr([...array]);\r\n        setPivot(pivot);\r\n        setPositionedIndexArr(positionedIndexArr);\r\n        setLimits({\r\n            low: low,\r\n            high: high,\r\n        });\r\n        setStates({\r\n            i: x,\r\n            j: y,\r\n            flag: flagg,\r\n        });\r\n        // console.log(w);\r\n    }\r\n\r\n    function modifyArrMerge(\r\n        array,\r\n        low,\r\n        mid,\r\n        k,\r\n        i,\r\n        j,\r\n        f1,\r\n        f2,\r\n        isPostiioned,\r\n        isPositionedTx,\r\n        colorEleArr,\r\n        colorArr\r\n    ) {\r\n        setArr([...array]);\r\n        setMergeStates({\r\n            low: low,\r\n            mid: mid,\r\n            k: k,\r\n            i: i,\r\n            j: j,\r\n            f1: f1,\r\n            f2: f2,\r\n            isPositioned: [...isPostiioned],\r\n            isPositionedTx: [...isPositionedTx],\r\n            colorEleArr: [...colorEleArr],\r\n            colorArr: [...colorArr],\r\n        });\r\n    }\r\n\r\n    function modifyArrHeap(array, i, j, sortedIndex, flagg, heapify) {\r\n        setArr([...array]);\r\n        setHeapStates({\r\n            i: i,\r\n            j: j,\r\n            sortedIndex: sortedIndex,\r\n            flag: flagg,\r\n            heapify: heapify,\r\n        });\r\n    }\r\n\r\n    function updateAlgoSelection(selectedAlgo) {\r\n        switch (selectedAlgo) {\r\n            case 1:\r\n                return modifyArrBubble;\r\n            case 2:\r\n                return modifyArrInsert;\r\n            case 3:\r\n                return modifyArrQuick;\r\n            case 4:\r\n                return modifyArrHeap;\r\n            case 5:\r\n                return modifyArrMerge;\r\n            default:\r\n                return modifyArrBubble;\r\n        }\r\n    }\r\n\r\n    function selectAnimGround(algoID) {\r\n        switch (algoID) {\r\n            case 1:\r\n                return (\r\n                    <AnimGround\r\n                        arr={arr}\r\n                        inProcess={inProcess}\r\n                        inSorted={isSorted}\r\n                        strings={strings}\r\n                        psIndex={psIndex}\r\n                        max={max}\r\n                        states={states}\r\n                        speed={speed}\r\n                        isSorted={isSorted}\r\n                        time={time}\r\n                        algoID={selectedAlgo}\r\n                        BSI={bubbleSortedIndex}\r\n                    />\r\n                );\r\n            case 2:\r\n                return (\r\n                    <AnimGround\r\n                        arr={arr}\r\n                        inProcess={inProcess}\r\n                        strings={strings}\r\n                        psIndex={psIndex}\r\n                        max={max}\r\n                        states={states}\r\n                        speed={speed}\r\n                        isSorted={isSorted}\r\n                        time={time}\r\n                        algoID={selectedAlgo}\r\n                        insertionStates={insertStates}\r\n                    />\r\n                );\r\n            case 3:\r\n                return (\r\n                    <AnimGround\r\n                        arr={arr}\r\n                        inProcess={inProcess}\r\n                        strings={strings}\r\n                        psIndex={psIndex}\r\n                        max={max}\r\n                        states={states}\r\n                        speed={speed}\r\n                        isSorted={isSorted}\r\n                        time={time}\r\n                        algoID={selectedAlgo}\r\n                        positionedIndexArr={positionedIndexArr}\r\n                        pivot={pivotElement}\r\n                        limits={partitionLimits}\r\n                    />\r\n                );\r\n            case 4:\r\n                return (\r\n                    <AnimGround\r\n                        arr={arr}\r\n                        inProcess={inProcess}\r\n                        strings={strings}\r\n                        psIndex={psIndex}\r\n                        max={max}\r\n                        states={heapStates}\r\n                        speed={speed}\r\n                        isSorted={isSorted}\r\n                        time={time}\r\n                        algoID={selectedAlgo}\r\n                    />\r\n                );\r\n            case 5:\r\n                return (\r\n                    <AnimGround\r\n                        arr={arr}\r\n                        inProcess={inProcess}\r\n                        strings={strings}\r\n                        psIndex={psIndex}\r\n                        max={max}\r\n                        states={states}\r\n                        speed={speed}\r\n                        isSorted={isSorted}\r\n                        time={time}\r\n                        algoID={selectedAlgo}\r\n                        mergeStates={mergeStates}\r\n                    />\r\n                );\r\n            default:\r\n                return (\r\n                    <AnimGround\r\n                        arr={arr}\r\n                        inProcess={inProcess}\r\n                        strings={strings}\r\n                        psIndex={psIndex}\r\n                        max={max}\r\n                        states={states}\r\n                        speed={speed}\r\n                        isSorted={isSorted}\r\n                        time={time}\r\n                        algoID={selectedAlgo}\r\n                    />\r\n                );\r\n        }\r\n    }\r\n\r\n    let max = Math.max(...arr);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header algoID={setAlgoImpl} inProcess={inProcess} />\r\n            <Controls\r\n                update={updateArr}\r\n                speed={speed}\r\n                updateSpeed={setSpeedImpl}\r\n                inProcess={inProcess}\r\n                setInProcess={setInProcessImpl}\r\n                setIsSorted={setIsSortedImpl}\r\n            />\r\n            {selectAnimGround(selectedAlgo)}\r\n            <Footer\r\n                arr={arr}\r\n                // update={selectedAlgo===1 ? modifyArrBubble : selectedAlgo===2 ? modifyArrInsert : selectedAlgo===3 ? modifyArrQuick : modifyArrBubble}\r\n                setPsIndex={setPsIndex}\r\n                update={updateAlgoSelection(selectedAlgo)}\r\n                speed={speed}\r\n                inProcess={inProcess}\r\n                setInProcess={setInProcessImpl}\r\n                isSorted={isSorted}\r\n                setIsSorted={setIsSortedImpl}\r\n                setTime={setTimeImpl}\r\n                algoID={selectedAlgo}\r\n                colorEleArr={mergeStates.colorEleArr}\r\n                colorArr={mergeStates.colorArr}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}